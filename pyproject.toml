[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-agent-framework"
version = "1.0.0"
description = "A powerful, intelligent agent framework for building scalable AI-driven automation systems"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AI Agent Framework Team", email = "team@aiagentframework.com"}
]
maintainers = [
    {name = "AI Agent Framework Team", email = "team@aiagentframework.com"}
]
keywords = ["ai", "agents", "automation", "llm", "langgraph", "framework"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"
dependencies = [
    # Core dependencies - aligned with requirements.txt
    "langchain-core==0.3.75",
    "langchain-community==0.3.29", 
    "langgraph==0.6.6",
    "langsmith==0.4.21",
    
    # LLM Provider dependencies
    "openai>=1.0.0",
    "anthropic>=0.25.0",
    
    # Email processing
    "email-validator>=2.0.0",
    "python-dotenv>=1.0.0",
    
    # Web framework - aligned with requirements.txt
    "fastapi==0.111.0",
    "uvicorn==0.29.0",
    
    # Data validation - aligned with requirements.txt
    "pydantic==2.7.4",
    
    # Async support - aligned with requirements.txt
    "httpx==0.27.0",
    "aiofiles>=23.0.0",
    
    # Monitoring and observability
    "prometheus-client>=0.17.0",
    "structlog>=23.1.0",
    
    # Configuration
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    
    # Development tools
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "isort>=5.12.0",
]
redis = [
    "redis>=4.6.0",
]
postgres = [
    "psycopg2-binary>=2.9.0",
]
all = [
    "ai-agent-framework[dev,redis,postgres]",
]

[project.urls]
Homepage = "https://github.com/ravi-sharma/ai-agent-framework"
Documentation = "https://github.com/ravi-sharma/ai-agent-framework#readme"
Repository = "https://github.com/ravi-sharma/ai-agent-framework"
"Bug Tracker" = "https://github.com/ravi-sharma/ai-agent-framework/issues"

[project.scripts]
ai-agent = "main:main"

[tool.setuptools.packages.find]
include = ["agents*", "graphs*", "prompts*", "tools*", "memory*", "services*", "configs*", "utils*", "models*"]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langgraph.*",
    "langsmith.*",
    "openai.*",
    "anthropic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["agents", "graphs", "prompts", "tools", "memory", "services", "configs", "utils", "models"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]